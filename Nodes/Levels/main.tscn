[gd_scene load_steps=21 format=3 uid="uid://1ss6vrwe7fqk"]

[ext_resource type="PackedScene" uid="uid://v1b207tjtxd7" path="res://Nodes/Probs/plank_floor.tscn" id="1_dp2i7"]
[ext_resource type="Texture2D" uid="uid://dtjiixionvm3u" path="res://Graphics/Textures/noiseTexture.png" id="1_ndwl0"]
[ext_resource type="Texture2D" uid="uid://cpftchpptesj7" path="res://Graphics/Textures/tilingvoronoi.png" id="2_s7x6b"]
[ext_resource type="PackedScene" uid="uid://ds8i0tw3it73m" path="res://Nodes/Probs/candle.tscn" id="4_04vmm"]
[ext_resource type="PackedScene" uid="uid://biwcjtqln5q08" path="res://Nodes/Probs/spider_web.tscn" id="5_2pygc"]
[ext_resource type="PackedScene" uid="uid://hbta6j8yvriw" path="res://Nodes/Probs/table.tscn" id="6_8lxur"]
[ext_resource type="PackedScene" uid="uid://do2tpj83sb5b6" path="res://Nodes/Probs/book.tscn" id="7_yndja"]
[ext_resource type="Script" path="res://Scripts/Interaction/Holdable.cs" id="8_4d54r"]
[ext_resource type="PackedScene" uid="uid://cd56jcy5y1qy" path="res://Nodes/Probs/bottle.tscn" id="8_ntrqp"]
[ext_resource type="PackedScene" uid="uid://d3fgy483alyqy" path="res://Nodes/Probs/cauldron.tscn" id="9_2842f"]
[ext_resource type="PackedScene" uid="uid://bt7qpwmvk5837" path="res://Nodes/Probs/chair.tscn" id="9_cm0k1"]
[ext_resource type="Script" path="res://Scripts/CharacterController/CharacterController.cs" id="11_axi2o"]
[ext_resource type="Script" path="res://Scripts/Interaction/Character/UseManager.cs" id="12_s2ghm"]
[ext_resource type="Script" path="res://Scripts/Interaction/Character/InteractionManager.cs" id="13_v02xf"]
[ext_resource type="Script" path="res://Scripts/Interaction/Character/GraspManager.cs" id="14_qs6i1"]

[sub_resource type="Shader" id="Shader_2gbhu"]
code = "
// NOTE: Shader automatically converted from Godot Engine 4.3.stable.mono's ProceduralSkyMaterial.

shader_type sky;
render_mode use_debanding;

uniform vec4 sky_top_color : source_color = vec4(0.385, 0.454, 0.55, 1.0);
uniform vec4 sky_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float sky_curve : hint_range(0, 1) = 0.15;
uniform float sky_energy = 1.0; // In Lux.
uniform sampler2D sky_cover : filter_linear, source_color, hint_default_black;
uniform vec4 sky_cover_modulate : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 ground_bottom_color : source_color = vec4(0.2, 0.169, 0.133, 1.0);
uniform vec4 ground_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float ground_curve : hint_range(0, 1) = 0.02;
uniform float ground_energy = 1.0;
uniform float sun_angle_max = 30.0;
uniform float sun_curve : hint_range(0, 1) = 0.15;
uniform float exposure : hint_range(0, 128) = 1.0;

uniform sampler2D voronoi_texture;
uniform sampler2D perlin_texture;

uniform float perlin_min;
uniform float perlin_max;
uniform float perlin_cutout;

float map(float value, float srcMin, float srcMax, float destMin, float destMax){
    return destMin + (value-srcMin) * (destMax-destMin) / (srcMax-srcMin);
}

mat3 rotation3dY(float angle) {
  float s = sin(angle);
  float c = cos(angle);
  return mat3(
    vec3(c, 0.0, -s),
    vec3(0.0, 1.0, 0.0),
    vec3(s, 0.0, c)
  );
}

vec4 projImage(float _altitude, float _rot_x, float _viewVec_x, float _imageSize, sampler2D _image) {
	_imageSize = _imageSize / 2.;
    if(_rot_x > _altitude-_imageSize && _rot_x < _altitude+_imageSize){
  	  float xSizeFactor = 2.*PI;
  	  if(_viewVec_x > -_imageSize*xSizeFactor && _viewVec_x < _imageSize*xSizeFactor){
  		  float v = map(_rot_x-_altitude, -_imageSize, _imageSize, 1., 0.);
  		  float u = map(_viewVec_x, -_imageSize*xSizeFactor, _imageSize*xSizeFactor, 0., 1.);
		  return vec4(u,v,0,0);
  		  return texture(_image, vec2(u, v));
  	  }
    }
    return vec4(0);
}

vec4 skyImageProj(vec3 viewVec, float _rotation, float _altitude, float _imageSize, sampler2D _imageSampler) {
    _altitude = fract(_altitude);
    vec3 _EYEDIR = rotation3dY(_rotation) * viewVec;
    //Since we applied the rotation directly to the viewVec we can just ingore it from now on.

    //float rot_z = atan(_EYEDIR.y, _EYEDIR.x)/(2.0*PI)+0.5;
    float rot_x = atan(_EYEDIR.y, _EYEDIR.z)/(2.0*PI)+0.5;
    //float rot_y = atan(_EYEDIR.z, _EYEDIR.x)/(2.0*PI)+0.5;

    vec4 result = projImage(_altitude, rot_x, _EYEDIR.x, _imageSize, _imageSampler);

    //make sure the image isn't clipped when altitude approaches the max/min values
    if(_altitude > 0.75) {
  	  result = max(result, projImage(_altitude-1.0, rot_x, _EYEDIR.x, _imageSize, _imageSampler));
    } else if (_altitude < 0.25) {
  	  result = max(result, projImage(_altitude+1.0, rot_x, _EYEDIR.x, _imageSize, _imageSampler));
    }
    return result;
}

vec2 calculate_pitch_yaw(vec3 direction) {
	// Yaw is the bearing of the forward vector's shadow in the xy plane.
    float yaw = atan(direction.x / direction.z);

    // Pitch is the altitude of the forward vector off the xy plane, toward the down direction.
    float pitch = asin(direction.y)/PI;

	return vec2(pitch, yaw);
}

vec3 calculate_light_disk(vec3 light_color, float light_energy, vec3 light_dir, vec3 eye_dir) {
	vec2 pitch_yaw = calculate_pitch_yaw(-light_dir);
	//return skyImageProj(eye_dir, -pitch_yaw.y, pitch_yaw.x, sun_angle_max, perlin_texture).xyz;

	return light_color * light_energy * 30.;
}

vec3 calculate_sky_from_light(vec3 sky, vec3 eye_dir, vec3 light_dir, float light_size, float light_energy, vec3 light_color, vec2 sky_coords) {
	//return calculate_light_disk(
		//light_color, light_energy, light_dir, eye_dir
	//);
	float sun_angle = acos(dot(light_dir, eye_dir));
	if (sun_angle < light_size) {
		return calculate_light_disk(
			light_color, light_energy, light_dir, eye_dir
		);
	} else if (sun_angle < sun_angle_max) {
		float c2 = (sun_angle - light_size) / (sun_angle_max - light_size);
		return mix(
			calculate_light_disk(
				light_color, light_energy, light_dir, eye_dir
			),
			sky,
			clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0)
		);
	}
	return sky;
}

void sky() {
	float v_angle = acos(clamp(EYEDIR.y, -1.0, 1.0));
	float c = (1.0 - v_angle / (PI * 0.5));
	float sky_gradient = clamp(1.0 - pow(1.0 - c, 1.0 / sky_curve), 0.0, 1.0);
	vec3 sky = mix(sky_horizon_color.rgb, sky_top_color.rgb, sky_gradient);
	sky *= sky_energy;

	if (LIGHT0_ENABLED) {
		sky = calculate_sky_from_light(sky, EYEDIR, LIGHT0_DIRECTION, LIGHT0_SIZE, LIGHT0_ENERGY, LIGHT0_COLOR, SKY_COORDS);
	}

	if (LIGHT1_ENABLED) {
		sky = calculate_sky_from_light(sky, EYEDIR, LIGHT1_DIRECTION, LIGHT1_SIZE, LIGHT1_ENERGY, LIGHT1_COLOR, SKY_COORDS);
	}

	if (LIGHT2_ENABLED) {
		sky = calculate_sky_from_light(sky, EYEDIR, LIGHT2_DIRECTION, LIGHT2_SIZE, LIGHT2_ENERGY, LIGHT2_COLOR, SKY_COORDS);
	}

	if (LIGHT3_ENABLED) {
		sky = calculate_sky_from_light(sky, EYEDIR, LIGHT3_DIRECTION, LIGHT3_SIZE, LIGHT3_ENERGY, LIGHT3_COLOR, SKY_COORDS);
	}

	vec4 sky_cover_texture = texture(sky_cover, SKY_COORDS);
	sky += (sky_cover_texture.rgb * sky_cover_modulate.rgb) * sky_cover_texture.a * sky_cover_modulate.a * sky_energy;

	c = (v_angle - (PI * 0.5)) / (PI * 0.5);
	vec3 ground = mix(ground_horizon_color.rgb, ground_bottom_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / ground_curve), 0.0, 1.0));
	ground *= ground_energy;


	float perlin_range = perlin_max - perlin_min;
	float perlin = perlin_min + clamp(texture(perlin_texture, SKY_COORDS*vec2(2)).x - perlin_cutout, 0, 1) * perlin_range;
	COLOR = mix(
		ground,
		sky + clamp(mix(
			vec3(0),
			smoothstep(
				.35,
				.36,
				clamp(texture(voronoi_texture, SKY_COORDS*vec2(15)).xyz, 0, 1)
			) * perlin + clamp(pow(((texture(perlin_texture, SKY_COORDS).x) + .5f) * .62, 12), 0, 1) * vec3(.6, .3, .9),
			sky_gradient-.6
		), 0, 1),
		step(0.0, EYEDIR.y)
	) * exposure;
	//COLOR = sky;
	//COLOR = vec3(abs(calculate_pitch_yaw(EYEDIR)) / PI * 2.,0);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ipld8"]
shader = SubResource("Shader_2gbhu")
shader_parameter/sky_top_color = Color(0.0155834, 0.0394169, 0.0679986, 1)
shader_parameter/sky_horizon_color = Color(0.0849764, 0.0471689, 0.0416048, 1)
shader_parameter/sky_curve = 0.096
shader_parameter/sky_energy = 1.0
shader_parameter/sky_cover_modulate = Color(1, 1, 1, 1)
shader_parameter/ground_bottom_color = Color(0, 0, 0, 1)
shader_parameter/ground_horizon_color = Color(0.102597, 0.049701, 0.0281515, 1)
shader_parameter/ground_curve = 0.02
shader_parameter/ground_energy = 1.0
shader_parameter/sun_angle_max = 0.04
shader_parameter/sun_curve = 1.0
shader_parameter/exposure = 3.7
shader_parameter/perlin_min = 0.0
shader_parameter/perlin_max = 1.0
shader_parameter/perlin_cutout = 0.465
shader_parameter/voronoi_texture = ExtResource("2_s7x6b")
shader_parameter/perlin_texture = ExtResource("1_ndwl0")

[sub_resource type="Sky" id="Sky_f737e"]
sky_material = SubResource("ShaderMaterial_ipld8")

[sub_resource type="Environment" id="Environment_3w1yn"]
background_mode = 2
sky = SubResource("Sky_f737e")
tonemap_mode = 3
tonemap_exposure = 2.0
glow_enabled = true
volumetric_fog_enabled = true
volumetric_fog_density = 0.018

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_mmnqs"]

[node name="Main" type="Node3D"]

[node name="Config" type="Node" parent="."]

[node name="WorldEnvironment" type="WorldEnvironment" parent="Config"]
environment = SubResource("Environment_3w1yn")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="Config"]
transform = Transform3D(-0.878817, 0.181831, -0.441155, 0, 0.924546, 0.38107, 0.477159, 0.334891, -0.812507, 0, 0, 0)
light_color = Color(0.73, 0.901, 1, 1)
light_energy = 0.05
shadow_enabled = true

[node name="Environment" type="Node" parent="."]

[node name="Floor" type="Node" parent="Environment"]

[node name="Node3D" parent="Environment/Floor" instance=ExtResource("1_dp2i7")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.152148, 0, -0.305392)

[node name="Node3D7" parent="Environment/Floor" instance=ExtResource("1_dp2i7")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -4.80017, 0, -0.305392)

[node name="Node3D8" parent="Environment/Floor" instance=ExtResource("1_dp2i7")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -4.80017, 0, -6.45299)

[node name="Node3D9" parent="Environment/Floor" instance=ExtResource("1_dp2i7")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -4.80017, 0, 5.83676)

[node name="Node3D5" parent="Environment/Floor" instance=ExtResource("1_dp2i7")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.152148, 0, -6.3819)

[node name="Node3D6" parent="Environment/Floor" instance=ExtResource("1_dp2i7")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 5.07421, 0, -6.40284)

[node name="Node3D3" parent="Environment/Floor" instance=ExtResource("1_dp2i7")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 5.10774, 0, -0.305392)

[node name="Node3D4" parent="Environment/Floor" instance=ExtResource("1_dp2i7")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 5.10774, 0, 5.83894)

[node name="Node3D2" parent="Environment/Floor" instance=ExtResource("1_dp2i7")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.152148, 0, 5.86603)

[node name="Props" type="Node" parent="Environment"]

[node name="Candles" type="Node" parent="Environment/Props"]

[node name="Candle" parent="Environment/Props/Candles" instance=ExtResource("4_04vmm")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -2.34507, 0.173521, 1.46642)
freeze = true
freeze_mode = 1
metadata/Fire = false

[node name="Candle7" parent="Environment/Props/Candles" instance=ExtResource("4_04vmm")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 5.92647, 2.83761, -4.66296)

[node name="Candle9" parent="Environment/Props/Candles" instance=ExtResource("4_04vmm")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 1.65412, 0.209437, -8.12784)

[node name="Candle10" parent="Environment/Props/Candles" instance=ExtResource("4_04vmm")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.727998, 0.209437, -8.12784)

[node name="Candle11" parent="Environment/Props/Candles" instance=ExtResource("4_04vmm")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -1.94547, 0.209436, -4.11562)
collision_layer = 4

[node name="Candle12" parent="Environment/Props/Candles" instance=ExtResource("4_04vmm")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 3.78582, 0.209437, 0.172731)

[node name="Candle8" parent="Environment/Props/Candles" instance=ExtResource("4_04vmm")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 5.06132, 2.92538, -6.03098)

[node name="Candle2" parent="Environment/Props/Candles" instance=ExtResource("4_04vmm")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.122412, 0.107726, 3.57616)
freeze = true
freeze_mode = 1
metadata/Fire = false

[node name="Candle3" parent="Environment/Props/Candles" instance=ExtResource("4_04vmm")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.938936, 0.227706, 6.05973)
freeze = true
freeze_mode = 1
metadata/Fire = false

[node name="Candle4" parent="Environment/Props/Candles" instance=ExtResource("4_04vmm")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -4.67974, 0.173522, 2.909)
freeze = true
freeze_mode = 1
metadata/Fire = false

[node name="Candle6" parent="Environment/Props/Candles" instance=ExtResource("4_04vmm")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -4.06371, 0.119582, 6.00648)
freeze = true
freeze_mode = 1
metadata/Fire = false

[node name="Table" parent="Environment/Props" instance=ExtResource("6_8lxur")]
transform = Transform3D(2.2, 0, 0, 0, 2.2, 0, 0, 0, 2.2, 5.10417, 0.132775, -4.21439)

[node name="SpiderWeb" parent="Environment/Props" instance=ExtResource("5_2pygc")]
transform = Transform3D(-0.785643, 0.294034, -0.997926, 0.728402, -0.214916, -1.24447, -1.35185, -0.286682, -0.0905848, 5.76942, 1.14663, -0.39284)
skeleton = NodePath("")

[node name="SpiderWeb2" parent="Environment/Props" instance=ExtResource("5_2pygc")]
transform = Transform3D(-1.33342, 0.216595, -1.22457, 2.16712, 0.07561, -1.11703, -0.530591, -0.235503, -1.48489, 6.09685, 5.42085, -7.44371)
skeleton = NodePath("")

[node name="Book" parent="Environment/Props" instance=ExtResource("7_yndja")]
transform = Transform3D(4.2222e-08, 1, 1.13133e-08, 0.965926, -4.37114e-08, 0.258819, 0.258819, 0, -0.965926, 4.2829, 3.20502, -4.9195)
script = ExtResource("8_4d54r")

[node name="Bottle" parent="Environment/Props" instance=ExtResource("8_ntrqp")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 4.99842, 2.8468, -3.10159)

[node name="Cauldron" parent="Environment/Props" instance=ExtResource("9_2842f")]
transform = Transform3D(1.00125, 0, 0, 0, 1.00125, 0, 0, 0, 1.00125, -2.45848, 0.145159, 4.20749)

[node name="Chair" parent="Environment/Props" instance=ExtResource("9_cm0k1")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 1.0638, 0.148203, -4.40826)

[node name="CharacterBody3D" type="CharacterBody3D" parent="." node_paths=PackedStringArray("CameraOriginNode")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.34003, 0)
collision_layer = 2
collision_mask = 3
slide_on_ceiling = false
script = ExtResource("11_axi2o")
JumpForce = 5.0
CameraOriginNode = NodePath("Camera3D")

[node name="CollisionShape3D" type="CollisionShape3D" parent="CharacterBody3D"]
shape = SubResource("CapsuleShape3D_mmnqs")

[node name="Camera3D" type="Camera3D" parent="CharacterBody3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 0)
script = ExtResource("13_v02xf")

[node name="Grasp" type="Generic6DOFJoint3D" parent="CharacterBody3D/Camera3D"]
linear_limit_x/restitution = 0.1
linear_limit_y/restitution = 0.1
linear_limit_z/restitution = 0.1
script = ExtResource("14_qs6i1")
anchorNodePath = NodePath("Hand")

[node name="Hand" type="StaticBody3D" parent="CharacterBody3D/Camera3D/Grasp"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.475, -0.275, -1)

[node name="Use" type="Node" parent="CharacterBody3D/Camera3D"]
script = ExtResource("12_s2ghm")
